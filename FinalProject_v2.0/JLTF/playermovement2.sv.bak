
module  playermovement2 ( input Reset, frame_clk, collision,
					input [31:0] keycode,
               output [9:0] SpriteX2, SpriteY2, SpriteS2,
					output stand2, crouch2, jump2, kick2, punch2, shoot2);
    
    logic [9:0] Ball_X_Pos2, Ball_X_Motion2, Ball_Y_Pos2, Ball_Y_Motion2, Ball_Size2;
	 logic [9:0] jump_velocity2;
	 logic jump_on_ground2, ground2;
	 logic [7:0] last5, last6, last7, last8;
	 


    parameter [9:0] Ball_X_Center2=400;  // Center position on the X axis
    parameter [9:0] Ball_Y_Center2=260;  // Center position on the Y axis
    parameter [9:0] Ball_X_Min2=0;       // Leftmost point on the X axis
    parameter [9:0] Ball_X_Max2=639;     // Rightmost point on the X axis
    parameter [9:0] Ball_Y_Min2=0;       // Topmost point on the Y axis
    parameter [9:0] Ball_Y_Max2=479;     // Bottommost point on the Y axis
    parameter [9:0] Ball_X_Step2=1;      // Step size on the X axis
    parameter [9:0] Ball_Y_Step2=1;      // Step size on the Y axis
	 
    assign Ball_Size2 = 128;		
	
  
	always_ff @ (posedge Reset or posedge frame_clk ) begin: Move_Ball
	  if (Reset)  // Asynchronous Reset
	  begin 
			
			Ball_Y_Motion2 <= 10'd0; //Ball_Y_Step;
			Ball_X_Motion2 <= 10'd0; //Ball_X_Step;
			Ball_Y_Pos2 <= Ball_Y_Center2;
			Ball_X_Pos2 <= Ball_X_Center2;
	  end

	  else 
	  begin 

			stand2 <= 1;
			crouch2 <= 0;
			jump2 <= 0;
			kick2 <= 0;
			punch2 <= 0;
			shoot2 <= 0;

			Ball_Y_Motion2 <= 0;
			Ball_X_Motion2 <= 0;
		  
//player2 keycodes-------------------------------------------------------------------------------------
			if(ground2 && keycode == 32'h0D000000) begin
				 stand2 <= 1;
				 if (Ball_X_Pos2 > 10) begin
					 Ball_X_Motion2 <= -2;//A
					 Ball_Y_Motion2 <= 0;
				 end
				 else begin
					 Ball_X_Motion2 <= 0;//A
					 Ball_Y_Motion2 <= 0;
				 end
			end

			if(ground2 && keycode == 32'h0F000000) begin
				 stand2 <= 1;
				 if (Ball_X_Pos2 < 580) begin
					 Ball_X_Motion2 <= 2;//D
					 Ball_Y_Motion2 <= 0;
				 end
				 else begin
					 Ball_X_Motion2 <= 0;//D
					 Ball_Y_Motion2 <= 0;
				 end
			end

			if(ground2 && keycode == 32'h0E000000) begin
				 crouch2 <= 1;
				 stand2 <= 0;
				 if (Ball_Y_Pos2 < 400) begin
					Ball_Y_Motion2 <= 2;//S
					Ball_X_Motion2 <= 0;
				 end
				 else begin
					 Ball_Y_Motion2 <= 0;//S
					 Ball_X_Motion2 <= 0;
				 end
			end
			
			if(ground2 && keycode == 32'h18000000) begin
				 kick2 <= 1;
				 stand2 <= 0;
				 Ball_X_Motion2 <= 0;//Q
				 Ball_Y_Motion2 <= 0;
			end
			
			if(ground2 && keycode == 32'h12000000) begin
				 punch2 <= 1;
				 stand2 <= 0;
				 shoot2 <= 1;
				 Ball_X_Motion2 <= 0;//E
				 Ball_Y_Motion2 <= 0;
			end
			
			if(ground2 && keycode == 32'h0D0C0000 && keycode == 32'h0C0D0000) begin
				 jump2 <= 1;
				 stand2 <= 0;
				 if (Ball_X_Pos2 > 10) begin
					 Ball_X_Motion2 <= -2;//A
					 Ball_Y_Motion2 <= -2;
				 end
				 else begin
					 Ball_X_Motion2 <= 0;//A
					 Ball_Y_Motion2 <= 0;
				 end
//						 Ball_X_Motion2 <= -2;//A & W
//						 Ball_Y_Motion2<= -2;
			end

			if(ground2 && keycode == 32'h0F0C0000 && keycode == 32'h0C0F0000) begin
				 jump2 <= 1;
				 stand2 <= 0;
				 Ball_X_Motion2 <= 2;//D & W
				 Ball_Y_Motion2 <= -2;
			end
			
			if(ground2 && keycode == 32'h0D0E0000 && keycode == 32'h0E0D0000) begin
				 crouch2 <= 1;
				 stand2 <= 0;
				 if (Ball_X_Pos2 > 10) begin
					 Ball_X_Motion2 <= -2;//A
					 Ball_Y_Motion2 <= 2;
				 end
				 else begin
					 Ball_X_Motion2 <= 0;//A
					 Ball_Y_Motion2 <= 0;
				 end
//						 Ball_X_Motion2 <= -2;//A & S
//						 Ball_Y_Motion2<= 2;
			end
			if(ground2 && keycode == 32'h0F0E0000 && keycode == 32'h0E0F0000) begin
				 crouch2 <= 1;
				 stand2 <= 0;
				 Ball_X_Motion2 <= 2;//D & S
				 Ball_Y_Motion2<= 2;
			end	
		  
		  
//		  end
		  if(last5 == 8'h0C || last6 == 8'h0C || last7 == 8'h0C || last8 == 8'h0C) begin
            if(jump_on_ground2)
              stand2 <= 1;
            else
            begin
              stand2 <= 0;
              jump2 <= 1;
            end
            Ball_Y_Motion2 <= jump_velocity2;
            Ball_X_Motion2 <= 0;
//				if(ground2)
//					stand2 <= 1;
//				else begin
//					stand2 <= 0;
//					jump2<= 1;
//				end
//				if(Ball_Y_Pos2 > 200) begin
//					Ball_Y_Motion2 <= jump_velocity2;
//					Ball_X_Motion2 <= 0;
//				end
//				else begin
//					Ball_Y_Motion2 <= 1;
//					Ball_X_Motion2 <= 0;
//				end
		  end
		  
		  Ball_Y_Pos2 <= (Ball_Y_Pos2 + Ball_Y_Motion2); // Update ball position
		  Ball_X_Pos2 <= (Ball_X_Pos2 + Ball_X_Motion2);
	 end  
	end

	 
    assign SpriteX2 = Ball_X_Pos2;
    assign SpriteY2 = Ball_Y_Pos2;
    assign SpriteS2 = Ball_Size2;

	 jump_fsm j_fsm2 (.Clk(frame_clk), .Reset(Reset), .jumping(jump2), .jump_on_ground(jump_on_ground2), .on_ground(ground2), .velocity(jump_velocity2));

	 lastKeyPressedWW l5 (.Clk(frame_clk), .Reset(Reset), .jump_on_ground(jump_on_ground2), .curr_key(keycode[31:24]), .last_key(last5));
	 lastKeyPressedWW l6 (.Clk(frame_clk), .Reset(Reset), .jump_on_ground(jump_on_ground2), .curr_key(keycode[23:16]), .last_key(last6));
	 lastKeyPressedWW l7 (.Clk(frame_clk), .Reset(Reset), .jump_on_ground(jump_on_ground2), .curr_key(keycode[15:8]), .last_key(last7));
	 lastKeyPressedWW l8 (.Clk(frame_clk), .Reset(Reset), .jump_on_ground(jump_on_ground2), .curr_key(keycode[7:0]), .last_key(last8));
	 
endmodule




/*
module  player1 ( input Reset, frame_clk,
					input [31:0] keycode,
          input logic jump_on_ground, on_ground, img3, img2, img1, imgfight, gameover,
          input [9:0] player2pos_x,
					input logic [9:0] jump_velocity,
					output logic crouching, standing, jumping, kicking, punching, crouchpunching, blocking, flip,
               output [9:0]  BallX, BallY, BallS );
    
    logic [9:0] Ball_X_Pos, Ball_X_Motion, Ball_Y_Pos, Ball_Y_Motion, Ball_Size;
	 logic crouching_temp, standing_temp;
    logic [7:0] b3, b2, b1, b0, l3, l2, l1, l0;
    assign b3 = keycode[31:24];
    assign b2 = keycode[23:16];
    assign b1 = keycode[15:8];
    assign b0 = keycode[7:0];
	 
	 
    parameter [9:0] Ball_X_Center=150;  // Center position on the X axis
    parameter [9:0] Ball_Y_Center=350;  // Center position on the Y axis
    parameter [9:0] Ball_X_Min=0;       // Leftmost point on the X axis
    parameter [9:0] Ball_X_Max=639;     // Rightmost point on the X axis
    parameter [9:0] Ball_Y_Min=0;       // Topmost point on the Y axis
    parameter [9:0] Ball_Y_Max=479;     // Bottommost point on the Y axis
    parameter [9:0] Ball_X_Step=1;      // Step size on the X axis
    parameter [9:0] Ball_Y_Step=1;      // Step size on the Y axis

    assign Ball_Size = 128;  // assigns the value 4 as a 10-digit binary number, ie "0000000100"
   
    always_ff @ (posedge Reset or posedge frame_clk )
    begin: Move_Ball
        if (Reset)  // Asynchronous Reset
        begin 
            Ball_Y_Motion <= 10'd0; //Ball_Y_Step;
				Ball_X_Motion <= 10'd0; //Ball_X_Step;
				Ball_Y_Pos <= Ball_Y_Center;
				Ball_X_Pos <= Ball_X_Center;
				standing <= 1;
        end
		  
        else 
        begin 
				 standing  <= 1;
				 crouching <= 0;
				 crouchpunching <= 0;
				 punching  <= 0;
				 kicking   <= 0;
				 jumping   <= 0;
         blocking <= 0;
				 
				 
				 if ( (Ball_Y_Pos + Ball_Size) >= Ball_Y_Max && keycode == 8'h16)  // Ball is at the bottom edge, BOUNCE!
					  Ball_Y_Motion <= 0;//(~ (Ball_Y_Step) + 1'b1);  // 2's complement.
					  
				 else if ( (Ball_Y_Pos - Ball_Size) <= Ball_Y_Min && keycode == 8'h1A)  // Ball is at the top edge, BOUNCE!
					  Ball_Y_Motion <= 0;//Ball_Y_Step;
					  
				  if ( (Ball_X_Pos + Ball_Size) >= Ball_X_Max && keycode == 8'h07)  // Ball is at the Right edge, BOUNCE!
					  Ball_X_Motion <= 0;//(~ (Ball_X_Step) + 1'b1);  // 2's complement.
					  
				 else if ( (Ball_X_Pos - Ball_Size) <= Ball_X_Min && keycode == 8'h04)  // Ball is at the Left edge, BOUNCE!
					  Ball_X_Motion <= 0;//Ball_X_Step;
					  
				 else 
					  Ball_Y_Motion <= 0;
					  Ball_X_Motion <= 0;//Ball_Y_Motion;  // Ball is somewhere in the middle, don't bounce, just keep moving

        if(Ball_X_Pos + 10 < player2pos_x)
          flip <= 0;
        else
          flip <= 1;
        
        if(on_ground && (!img3 && !img2 && !img1 && !imgfight && !gameover) && ((b3 == 8'h16 && b2 == 8'h08) || (b3 == 8'h16 && b1 == 8'h08) || (b3 == 8'h16 && b0 == 8'h08) ||
                (b2 == 8'h16 && b1 == 8'h08) || (b2 == 8'h16 && b0 == 8'h08) ||
                (b1 == 8'h16 && b0 == 8'h08))) // S + E
				begin
          crouchpunching <= 1;
          standing <= 0;
          Ball_X_Motion <= 0;
          Ball_Y_Motion<= 0;
        end
        else if(on_ground && (!img3 && !img2 && !img1 && !imgfight && !gameover) && ((b3 == 8'h04 && b2 == 8'h08) || (b3 == 8'h04 && b1 == 8'h08) || (b3 == 8'h04 && b0 == 8'h08) ||
                (b2 == 8'h04 && b1 == 8'h08) || (b2 == 8'h04 && b0 == 8'h08) ||
                (b1 == 8'h04 && b0 == 8'h08))) // A + E
				begin
          punching <= 1;
          standing <= 0;
          Ball_X_Motion <= -2;
          Ball_Y_Motion<= 0;
        end
        else if(on_ground && (!img3 && !img2 && !img1 && !imgfight && !gameover) && ((b3 == 8'h07 && b2 == 8'h14) || (b3 == 8'h07 && b1 == 8'h14) || (b3 == 8'h07 && b0 == 8'h14) ||
                (b2 == 8'h07 && b1 == 8'h14) || (b2 == 8'h07 && b0 == 8'h14) ||
                (b1 == 8'h07 && b0 == 8'h14))) // D + Q
				begin
          kicking <= 1;
          standing <= 0;
          Ball_X_Motion <= 2;
          Ball_Y_Motion<= 0;
        end
        else if((!img3 && !img2 && !img1 && !imgfight && !gameover) && ((l3 == 8'h1A && b2 == 8'h07) || (l3 == 8'h1A && b1 == 8'h07) || (l3 == 8'h1A && b0 == 8'h07) ||
                (l2 == 8'h1A && b1 == 8'h07) || (l2 == 8'h1A && b0 == 8'h07) ||
                (l1 == 8'h1A && b0 == 8'h07) || 
                (b3 == 8'h07 && l2 == 8'h1A) || (b3 == 8'h07 && l1 == 8'h1A) || (b3 == 8'h07 && l0 == 8'h1A) ||
                (b2 == 8'h07 && l1 == 8'h1A) || (b2 == 8'h07 && l0 == 8'h1A) ||
                (b1 == 8'h07 && l0 == 8'h1A))) // W + D, D + W
				begin
            if(jump_on_ground)
              standing <= 1;
            else
            begin
              standing <= 0;
              jumping <= 1;
            end
            Ball_Y_Motion <= jump_velocity;
            Ball_X_Motion <= 2;
        end
        else if((!img3 && !img2 && !img1 && !imgfight && !gameover) && ((l3 == 8'h1A && b2 == 8'h04) || (l3 == 8'h1A && b1 == 8'h04) || (l3 == 8'h1A && b0 == 8'h04) ||
                (l2 == 8'h1A && b1 == 8'h04) || (l2 == 8'h1A && b0 == 8'h04) ||
                (l1 == 8'h1A && b0 == 8'h04) ||
                (b3 == 8'h04 && l2 == 8'h1A) || (b3 == 8'h04 && l1 == 8'h1A) || (b3 == 8'h04 && l0 == 8'h1A) ||
                (b2 == 8'h04 && l1 == 8'h1A) || (b2 == 8'h04 && l0 == 8'h1A) ||
                (b1 == 8'h04 && l0 == 8'h1A))) // W + A, A + W
				begin
            if (Ball_X_Pos > 10) begin
              if(jump_on_ground)
                standing <= 1;
              else
              begin
                standing <= 0;
                jumping <= 1;
              end
              Ball_Y_Motion <= jump_velocity;
              Ball_X_Motion <= -2; 
            end
            else begin
              Ball_X_Motion <= 0;
              Ball_Y_Motion <= 0;
            end
        end
        else if((!img3 && !img2 && !img1 && !imgfight && !gameover) && (l3 == 8'h1A || l2 == 8'h1A || l1 == 8'h1A || l0 == 8'h1A)) // W
        begin
            if(jump_on_ground)
              standing <= 1;
            else
            begin
              standing <= 0;
              jumping <= 1;
            end
            Ball_Y_Motion <= jump_velocity;
            Ball_X_Motion <= 0;
        end
       else if(on_ground && (!img3 && !img2 && !img1 && !imgfight && !gameover) && (b3 == 8'h04 || b2 == 8'h04 || b1 == 8'h04 || b0 == 8'h04)) // A
        begin
            standing <= 1;
            if (Ball_X_Pos > 10) begin
                Ball_X_Motion <= -2;//A
                Ball_Y_Motion<= 0;
            end
            else begin
                Ball_X_Motion <= 0;//A
                Ball_Y_Motion<= 0;
            end
        end
        else if(on_ground && (!img3 && !img2 && !img1 && !imgfight && !gameover) && (b3 == 8'h07 || b2 == 8'h07 || b1 == 8'h07 || b0 == 8'h07)) // D
        begin
            standing <= 1;
            if (Ball_X_Pos < 550) begin
                Ball_X_Motion <= 2;//D
                Ball_Y_Motion <= 0;
            end
            else begin
                Ball_X_Motion <= 0;//D
                Ball_Y_Motion <= 0;
            end
        end
        else if(on_ground && (!img3 && !img2 && !img1 && !imgfight && !gameover) && (b3 == 8'h16 || b2 == 8'h16 || b1 == 8'h16 || b0 == 8'h16)) // S
        begin
            crouching <= 1;
            standing <= 0;
            Ball_Y_Motion <= 0;
            Ball_X_Motion <= 0;
        end
        else if(on_ground && (!img3 && !img2 && !img1 && !imgfight && !gameover) && (b3 == 8'h14 || b2 == 8'h14 || b1 == 8'h14 || b0 == 8'h14)) // Q
        begin
            kicking <= 1;
            standing <= 0;
            Ball_X_Motion <= 0;
            Ball_Y_Motion<= 0;
        end
        else if(on_ground && (!img3 && !img2 && !img1 && !imgfight && !gameover) && (b3 == 8'h08 || b2 == 8'h08 || b1 == 8'h08 || b0 == 8'h08)) // E
        begin
            punching <= 1;
            standing <= 0;
            Ball_X_Motion <= 0;
            Ball_Y_Motion<= 0;
        end
        else if(on_ground && (!img3 && !img2 && !img1 && !imgfight && !gameover) && (b3 == 8'h09 || b2 == 8'h09 || b1 == 8'h09 || b0 == 8'h09)) // F
        begin
            blocking <= 1;
            standing <= 0;
            Ball_X_Motion <= 0;
            Ball_Y_Motion<= 0;
        end
				 
			  Ball_Y_Pos <= (Ball_Y_Pos + Ball_Y_Motion);  // Update ball position
				Ball_X_Pos <= (Ball_X_Pos + Ball_X_Motion);


    
		end
		
    end
       
    assign BallX = Ball_X_Pos;
   
    assign BallY = Ball_Y_Pos;
   
    assign BallS = Ball_Size;
    
		  lastKeyPressedBat k3(.Clk(frame_clk),
                          .Reset(Reset),
                          .jump_on_ground,
                          .curr_key(b3),
                          .last_key(l3)
                          );
								  
        lastKeyPressedBat k2(.Clk(frame_clk),
                          .Reset(Reset),
                          .jump_on_ground,
                          .curr_key(b2),
                          .last_key(l2)
                          );
								  
        lastKeyPressedBat k1(.Clk(frame_clk),
                          .Reset(Reset),
                          .jump_on_ground,
                          .curr_key(b1),
                          .last_key(l1)
                          );
								  
        lastKeyPressedBat k0(.Clk(frame_clk),
                          .Reset(Reset),
                          .jump_on_ground,
                          .curr_key(b0),
                          .last_key(l0)
                          );

endmodule
*/